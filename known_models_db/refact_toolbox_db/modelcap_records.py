from known_models_db.refact_toolbox_db.modelcap_struct import ModelFunction, load_mini_html


db = [
    ModelFunction(
        "free-chat", 1, "Chat",
        type="chat",
        supports_highlight=True,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=15,
        third_party=[True, True, False, False, False],
        supports_languages="*.*",
        mini_html=load_mini_html("free-chat"),
        model=["gpt3.5", "gpt4", "starchat", "wizardlm", "llama2"],
        catch_question_mark=True,
    ),

    ModelFunction(
        "db-chat", 1, "Chat",
        type="chat",
        supports_highlight=True,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=15,
        third_party=[True],
        supports_languages="*.*",
        mini_html=load_mini_html("free-chat"),
        model=["gpt3.5func"],
    ),

    ModelFunction(
        "add-console-logs", 1, "Add Console Logs",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=20,
        third_party=[True],
        supports_languages="*.*",
        mini_html=load_mini_html("add-console-logs"),
        model=["gpt3.5"],
        model_fixed_intent="Add console logs",
    ),

    ModelFunction(
        "comment-each-line", 1, "Comment Each Line",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=20,
        third_party=[True],
        supports_languages="*.*",
        mini_html=load_mini_html("comment-each-line"),
        model=["gpt3.5"],
        model_fixed_intent="Comment each line",
    ),

    ModelFunction(
        "explain-code-block", 1, "Explain Code",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=30,
        third_party=[True, True],
        supports_languages="*.*",
        mini_html=load_mini_html("explain-code-block"),
        model=["gpt3.5", "gpt4"],
        model_fixed_intent="Explain Code",
    ),

    ModelFunction(
        "fix-bug", 1, "Fix Bug",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=30,
        third_party=[True, True],
        supports_languages="*.*",
        mini_html=load_mini_html("fix-bug"),
        model=["gpt3.5", "gpt4"],
        model_fixed_intent="Fix Bug",
    ),

    ModelFunction(
        "make-code-shorter", 1, "Make Code Shorter",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=30,
        third_party=[True, True],
        supports_languages="*.*",
        mini_html=load_mini_html("make-code-shorter"),
        model=["gpt3.5", "gpt4"],
        model_fixed_intent="Make Code Shorter",
    ),

    ModelFunction(
        "precise-naming", 1, "Precise Naming",
        type="toolbox",
        supports_highlight=False,
        supports_selection=True,
        selected_lines_min=1,
        selected_lines_max=30,
        third_party=[True],
        supports_languages="*.*",
        mini_html=load_mini_html("precise-naming"),
        model=["gpt3.5"],
        model_fixed_intent="Precise Naming",
    ),

    ModelFunction(
        "completion", 1, "Completion",
        type="completion",
        supports_highlight=True,   # FIXME what really should work is supports_no_selection, but no support in clients yet
        supports_no_selection=True,
        supports_selection=False,
        selected_lines_min=1,
        selected_lines_max=30,
        third_party=[True, True],
        supports_languages="*.*",
        mini_html="",
        model=["gpt3.5", "gpt4"],
        model_fixed_intent="Completion",
    ),
]
