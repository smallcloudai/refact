schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type BasicStuffResult {
  fuser_id: String!
  fuser_psystem: JSON
  invitations: [FWorkspaceInvitationOutput!]
  is_oauth: Boolean!
  my_own_ws_id: String
  workspaces: [FWorkspaceOutput!]!
}

input CloudtoolResultInput {
  dollars: Float! = 0
  ft_id: String!
  ftm_alt: Int!
  ftm_content: String!
  ftm_num: Int!
  ftm_provenance: String!
}

type EmailConfirmResult {
  fuser_id: String!
}

type FApiKeyOutput {
  apikey_archived_ts: Float!
  apikey_created_ts: Float!
  apikey_id: String!
  apikey_last4digits: String!
  full_key_shown_once: String
}

type FAuditRecordOutput {
  audit_counter: Int!
  audit_fgroup_id: String
  audit_fuser_id: String
  audit_metadata: JSON
  audit_op: String!
  audit_payload_existing_json: JSON
  audit_payload_id: String!
  audit_payload_updated_json: JSON
  audit_session_id: String
  audit_table_name: String!
  audit_ts: Float!
}

type FBotInstallOutput {
  marketable_name: String!
  marketable_version: String!
}

type FCloudTool {
  ctool_confirmed_exists_ts: Float
  ctool_description: String!
  ctool_id: String!
  ctool_name: String!
  ctool_parameters: JSON!
  located_fgroup_id: String
  owner_fuser_id: String
}

type FEphemeralDocumentOutput {
  edoc_icon: String!
  edoc_id: String!
  edoc_mtime: Int!
  edoc_size_bytes: Int!
  edoc_status_download: String!
  edoc_status_graphdb: String!
  edoc_status_vectordb: String!
  edoc_title: String!
  eds_id: String!
  eds_type: String!
  ws_id: String!
}

type FEphemeralSubs {
  news_action: String!
  news_payload: FEphemeralDocumentOutput
  news_payload_id: String!
}

type FExpertChoiceConsequences {
  cloudtools: [FCloudTool!]!
  models: [FModelItem!]!
}

input FExpertInput {
  fexp_allow_tools: String!
  fexp_block_tools: String!
  fexp_name: String!
  fexp_python_kernel: String!
  fexp_system_prompt: String!
  located_fgroup_id: String!
  owner_fuser_id: String
  owner_shared: Boolean!
}

type FExpertOutput {
  fexp_allow_tools: String!
  fexp_block_tools: String!
  fexp_id: String!
  fexp_name: String!
  fexp_python_kernel: String!
  fexp_system_prompt: String!
  located_fgroup_id: String
  owner_fuser_id: String
  owner_shared: Boolean!
}

input FExpertPatch {
  located_fgroup_id: String = null
  owner_shared: Boolean = null
}

type FExpertSubs {
  news_action: String!
  news_payload: FExpertOutput!
  news_payload_id: String!
  news_pubsub: String!
}

input FExternalDataSourceInput {
  eds_json: String!
  eds_name: String!
  eds_type: String!
  located_fgroup_id: String!
}

type FExternalDataSourceOutput {
  eds_created_ts: Float!
  eds_id: String!
  eds_json: JSON!
  eds_last_successful_scan_ts: Float!
  eds_modified_ts: Float!
  eds_name: String!
  eds_scan_problem: String!
  eds_type: String!
  located_fgroup_id: String!
  owner_fuser_id: String!
}

input FExternalDataSourcePatch {
  eds_json: String!
  eds_last_successful_scan_ts: Float = null
  eds_name: String = null
  located_fgroup_id: String = null
}

type FExternalDataSourceSubs {
  news_action: String!
  news_payload: FExternalDataSourceOutput
  news_payload_id: String!
}

input FKanbanTaskInput {
  state: String!
  title: String!
}

input FKnowledgeItemInput {
  iknow_is_core: Boolean! = false
  iknow_memory: String!
  iknow_tags: [String!]! = []
  located_fgroup_id: String!
  owner_shared: Boolean!
}

type FKnowledgeItemOutput {
  iknow_created_ts: Float!
  iknow_embedding_error: String!
  iknow_embedding_started_ts: Float!
  iknow_embedding_status: String!
  iknow_id: String!
  iknow_is_core: Boolean!
  iknow_memory: String!
  iknow_modified_ts: Float!
  iknow_stat_correct: Int!
  iknow_stat_relevant: Int!
  iknow_stat_times_used: Int!
  iknow_tags: [String!]!
  located_fgroup_id: String!
  owner_fuser_id: String!
  owner_shared: Boolean!
}

input FKnowledgeItemPatch {
  iknow_is_core: Boolean = null
  iknow_memory: String = null
  iknow_tags: [String!] = null
  located_fgroup_id: String = null
  owner_shared: Boolean = null
}

type FKnowledgeItemSubs {
  news_action: String!
  news_payload: FKnowledgeItemOutput
  news_payload_id: String!
  news_pubsub: String!
}

input FMarketplaceExpertInput {
  fexp_allow_tools: String!
  fexp_block_tools: String!
  fexp_name: String!
  fexp_python_kernel: String!
  fexp_system_prompt: String!
}

type FMassInvitationOutput {
  fuser_id: String!
  result: String!
}

type FModelItem {
  provm_name: String!
}

type FPermissionOutput {
  fgroup_id: String!
  fuser_id: String!
  perm_roles: Int!
}

input FPermissionPatch {
  perm_roles: Int!
}

type FPermissionSubs {
  news_action: String!
  news_payload: FPermissionOutput
  news_payload_id: String!
  news_pubsub: String!
}

input FPersonaInput {
  located_fgroup_id: String!
  persona_discounts: String = null
  persona_marketable_name: String!
  persona_marketable_version: String!
  persona_name: String!
  persona_setup: String!
}

type FPersonaKanbanSubs {
  news_action: String!
  news_bucket: String!
  news_payload_id: String!
  news_payload_task: FPersonaKanbanTaskOutput
}

type FPersonaKanbanTaskOutput {
  ktask_blocks_ktask_id: String
  ktask_budget: Int!
  ktask_details: JSON!
  ktask_done_ts: Float!
  ktask_failed_ts: Float!
  ktask_id: String!
  ktask_inbox_provenance: JSON!
  ktask_inbox_ts: Float!
  ktask_inprogress_ft_id: String!
  ktask_inprogress_ts: Float!
  ktask_title: String!
  ktask_todo_ts: Float!
  persona_id: String!
}

type FPersonaOutput {
  located_fgroup_id: String!
  owner_fuser_id: String!
  persona_archived_ts: Float!
  persona_created_ts: Float!
  persona_discounts: JSON
  persona_enabled: Boolean!
  persona_id: String!
  persona_marketable_name: String!
  persona_marketable_version: String!
  persona_name: String!
  persona_setup: JSON!
}

input FPersonaPatch {
  located_fgroup_id: String = null
  persona_archived_ts: Float = null
  persona_enabled: Boolean = null
  persona_marketable_version: String = null
  persona_name: String = null
  persona_setup: String = null
}

type FPersonaSubs {
  news_action: String!
  news_payload: FPersonaOutput
  news_payload_id: String!
  news_pubsub: String!
}

type FPluginOutput {
  plugin_name: String!
  plugin_setup_page: String!
  plugin_version: String!
}

input FStatsAddInput {
  fgroup_id: String! = ""
  st_chart: Int!
  st_how_many: Union!
  st_involved_fexp_id: String! = ""
  st_involved_fuser_id: String! = ""
  st_involved_model: String! = ""
  st_thing: String!
  ws_id: String!
}

type FStatsOutput {
  fgroup_id: String
  st_how_many: Union!
  st_involved_fexp_id: String
  st_involved_fuser_id: String
  st_involved_model: String
  st_timekey: String!
  ws_id: String
}

type FThreadDelta {
  ftm_content: JSON!
  ftm_role: String!
}

input FThreadInput {
  ft_app_capture: String! = ""
  ft_app_searchable: String! = ""
  ft_app_specific: String! = "null"
  ft_error: String! = "null"
  ft_fexp_id: String!
  ft_persona_id: String = null
  ft_subchat_dest_ft_id: String = null
  ft_title: String!
  ft_toolset: String! = "null"
  located_fgroup_id: String!
  owner_shared: Boolean!
}

input FThreadMessageInput {
  ftm_alt: Int!
  ftm_app_specific: String = "null"
  ftm_belongs_to_ft_id: String!
  ftm_call_id: String!
  ftm_content: String = "null"
  ftm_num: Int!
  ftm_prev_alt: Int!
  ftm_provenance: String!
  ftm_role: String!
  ftm_tool_calls: String = "null"
  ftm_usage: String = "null"
  ftm_user_preferences: String = "null"
}

type FThreadMessageOutput {
  ft_app_capture: String
  ft_app_searchable: String
  ft_app_specific: JSON
  ftm_alt: Int!
  ftm_app_specific: JSON
  ftm_belongs_to_ft_id: String!
  ftm_call_id: String!
  ftm_content: JSON
  ftm_created_ts: Float!
  ftm_num: Int!
  ftm_prev_alt: Int!
  ftm_provenance: JSON!
  ftm_role: String!
  ftm_tool_calls: JSON
  ftm_usage: JSON
  ftm_user_preferences: JSON
}

type FThreadMessageSubs {
  news_action: String!
  news_payload_id: String!
  news_payload_thread: FThreadOutput
  news_payload_thread_message: FThreadMessageOutput
  stream_delta: FThreadDelta
}

type FThreadMessagesCreateResult {
  count: Int!
  messages: [FThreadMessageOutput!]!
}

input FThreadMultipleMessagesInput {
  ftm_belongs_to_ft_id: String!
  messages: [FThreadMessageInput!]!
}

type FThreadOutput {
  ft_app_capture: String!
  ft_app_searchable: String!
  ft_app_specific: JSON
  ft_archived_ts: Float!
  ft_confirmation_request: JSON
  ft_confirmation_response: JSON
  ft_created_ts: Float!
  ft_error: JSON
  ft_fexp_id: String!
  ft_id: String!
  ft_locked_by: String!
  ft_need_assistant: Int!
  ft_need_tool_calls: Int!
  ft_need_user: Int!
  ft_persona_id: String
  ft_subchat_dest_ft_id: String
  ft_title: String!
  ft_toolset: JSON
  ft_updated_ts: Float!
  located_fgroup_id: String!
  owner_fuser_id: String!
  owner_shared: Boolean!
}

input FThreadPatch {
  ft_app_searchable: String = null
  ft_app_specific: String = null
  ft_archived_ts: Float = null
  ft_confirmation_request: String = null
  ft_confirmation_response: String = null
  ft_error: String = null
  ft_subchat_dest_ft_id: String = null
  ft_title: String = null
  ft_toolset: String = null
  located_fgroup_id: String = null
  owner_shared: Boolean = null
}

type FThreadSubs {
  news_action: String!
  news_payload: FThreadOutput
  news_payload_id: String!
  news_pubsub: String!
}

type FUserProfileOutput {
  fuser_experimental: Boolean!
  fuser_fullname: String!
  fuser_id: String!
}

input FUserProfilePatch {
  fuser_experimental: Boolean = null
  fuser_fullname: String = null
}

input FWorkspaceCreateInput {
  ws_name: String!
}

type FWorkspaceInvitationOutput {
  group_name: String!
  wsi_fgroup_id: String!
  wsi_id: String!
  wsi_invite_fuser_id: String!
  wsi_invited_by_fuser_id: String!
  wsi_roles: Int!
}

type FWorkspaceOutput {
  have_admin: Boolean!
  have_coins_enough: Boolean!
  have_coins_exactly: Union!
  root_group_name: String!
  ws_archived_ts: Float!
  ws_created_ts: Float!
  ws_id: String!
  ws_owner_fuser_id: String!
  ws_root_group_id: String!
}

type FlexusGroup {
  fgroup_created_ts: Float!
  fgroup_id: String!
  fgroup_name: String!
  fgroup_parent_id: String
  my_roles: Int
  ws_id: String!
}

input FlexusGroupInput {
  fgroup_name: String!
  fgroup_parent_id: String!
}

input FlexusGroupPatch {
  fgroup_name: String = null
  fgroup_parent_id: String = null
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](https://ecma-international.org/wp-content/uploads/ECMA-404_2nd_edition_december_2017.pdf).
"""
scalar JSON

type Mutation {
  api_key_delete(apikey_id: String!): Boolean!
  api_key_generate: FApiKeyOutput!
  bot_activate(activation_type: String!, first_calls: String!, first_question: String!, localtools: String!, persona_id: String!, title: String!, who_is_asking: String!): FThreadOutput!
  bot_arrange_kanban_situation(persona_id: String!, tasks: [FKanbanTaskInput!]!, ws_id: String!): Boolean!
  bot_install_from_marketplace(inside_fgroup_id: String!, new_setup: String!, persona_id: String!, persona_marketable_name: String!, persona_marketable_version: String!, persona_name: String!): Boolean!
  cloudtool_post_result(input: CloudtoolResultInput!): Boolean!
  create_captured_thread(input: FThreadInput!, on_behalf_of_fuser_id: String = null): FThreadOutput!
  email_confirm(token: String!): EmailConfirmResult!
  expert_create(input: FExpertInput!): FExpertOutput!
  expert_delete(id: String!): Boolean!
  expert_patch(id: String!, patch: FExpertPatch!): FExpertOutput!
  external_data_source_create(input: FExternalDataSourceInput!): FExternalDataSourceOutput!
  external_data_source_delete(id: String!): Boolean!
  external_data_source_patch(id: String!, patch: FExternalDataSourcePatch!): FExternalDataSourceOutput!
  group_create(input: FlexusGroupInput!): FlexusGroup!
  group_delete(fgroup_id: String!): String!
  group_patch(fgroup_id: String!, patch: FlexusGroupPatch!): FlexusGroup!
  invitation_accept(wsi_id: String!): Boolean!
  invitation_create_multiple(emails: [String!]!, fgroup_id: String!, roles: Int!): [FMassInvitationOutput!]!
  invitation_delete(wsi_fgroup_id: String!, wsi_invite_fuser_id: String!): Boolean!
  invitation_reject(wsi_id: String!): Boolean!
  knowledge_item_create(input: FKnowledgeItemInput!): FKnowledgeItemOutput!
  knowledge_item_delete(id: String!): Boolean!
  knowledge_item_mass_group_patch(dst_group_id: String!, src_group_id: String!): Int!
  knowledge_item_patch(id: String!, patch: FKnowledgeItemPatch!): FKnowledgeItemOutput!
  make_sure_have_expert(fexp_name: String!, fgroup_id: String, owner_fuser_id: String, python_kernel: String!, system_prompt: String!): String!
  marketplace_upsert_dev_bot(marketable_description: String!, marketable_expert_scheduled: FMarketplaceExpertInput!, marketable_expert_setup: FMarketplaceExpertInput!, marketable_expert_subchat: FMarketplaceExpertInput!, marketable_expert_todo: FMarketplaceExpertInput!, marketable_github_repo: String!, marketable_name: String!, marketable_run_this: String!, marketable_setup_default: String!, marketable_version: String!, ws_id: String!): FBotInstallOutput!
  password_change(new_password: String!, old_password: String!): Boolean!
  permission_delete(fgroup_id: String!, fuser_id: String!): Boolean!
  permission_patch(fgroup_id: String!, fuser_id: String!, patch: FPermissionPatch!): FPermissionOutput!
  persona_create(input: FPersonaInput!): FPersonaOutput!
  persona_delete(id: String!): Boolean!
  persona_patch(id: String!, patch: FPersonaPatch!): FPersonaOutput!
  reset_password_execute(new_password: String!, token: String!): Boolean!
  reset_password_start(username: String!): Boolean!
  session_open(password: String!, username: String!): String!
  session_renew: String!
  stats_add(records: [FStatsAddInput!]!): Boolean!
  tech_support_activate(ws_id: String!): Boolean!
  tech_support_set_config(config: TechSupportSettingsInput!, ws_id: String!): Boolean!
  thread_clear_confirmation(ft_id: String!): Boolean!
  thread_create(input: FThreadInput!): FThreadOutput!
  thread_delete(id: String!): Boolean!
  thread_lock(ft_id: String!, worker_name: String!): Boolean!
  thread_mass_group_patch(dst_group_id: String!, src_group_id: String!): Int!
  thread_messages_create_multiple(input: FThreadMultipleMessagesInput!): FThreadMessagesCreateResult!
  thread_patch(id: String!, patch: FThreadPatch!): FThreadOutput!
  thread_provide_toolset(ft_id: String!, toolset: String!): Boolean!
  thread_reset_error(ft_error: String!, ft_id: String!): Boolean!
  thread_reset_title(ft_id: String!, ft_title: String!): Boolean!
  thread_set_confirmation_request(confirmation_request: String!, ft_id: String!): Boolean!
  thread_set_confirmation_response(confirmation_response: String!, ft_id: String!): Boolean!
  thread_unlock(ft_id: String!, worker_name: String!): Boolean!
  user_profile_patch(patch: FUserProfilePatch!): FUserProfileOutput!
  user_register(input: RegisterInput!): Boolean!
  workspace_create(input: FWorkspaceCreateInput!): String!
  workspace_delete(dry_run: Boolean! = false, ws_id: String!): String!
  workspace_leave(ws_id: String!): String!
}

type PasswordResetTokenInfo {
  freset_used: Boolean!
  fuser_id: String!
}

type Query {
  api_key_list: [FApiKeyOutput!]!
  audit_list(limit: Int!, skip: Int!, ws_id: String!): [FAuditRecordOutput!]!
  cloud_tools_list(include_offline: Boolean! = false, located_fgroup_id: String!): [FCloudTool!]!
  expert_choice_consequences(fexp_id: String!, inside_fgroup_id: String!): [FModelItem!]!
  expert_choice_consequences2(fexp_id: String!, inside_fgroup_id: String!): FExpertChoiceConsequences!
  expert_get(id: String!): FExpertOutput!
  expert_list(limit: Int!, located_fgroup_id: String!, skip: Int!, sort_by: String! = ""): [FExpertOutput!]!
  experts_effective_list(located_fgroup_id: String!): [FExpertOutput!]!
  external_data_source_get(id: String!): FExternalDataSourceOutput!
  external_data_source_list(limit: Int!, located_fgroup_id: String!, skip: Int!, sort_by: String! = ""): [FExternalDataSourceOutput!]!
  group_get(fgroup_id: String!): FlexusGroup!
  group_list_for_workspace(ws_id: String!): [FlexusGroup!]!
  invitation_list(wsi_fgroup_id: String!): [FWorkspaceInvitationOutput!]!
  knowledge_get_cores(fgroup_id: String!): [FKnowledgeItemOutput!]!
  knowledge_item_get(id: String!): FKnowledgeItemOutput!
  knowledge_item_list(limit: Int!, located_fgroup_id: String!, skip: Int!, sort_by: String! = ""): [FKnowledgeItemOutput!]!
  knowledge_vecdb_search(fgroup_id: String!, q: String!, top_n: Int! = 5): [FKnowledgeItemOutput!]!
  permission_list(fgroup_id: String!): [FPermissionOutput!]!
  persona_get(id: String!): FPersonaOutput!
  persona_list(limit: Int!, located_fgroup_id: String!, skip: Int!, sort_by: String! = ""): [FPersonaOutput!]!
  plugins_installed: [FPluginOutput!]!
  query_basic_stuff(want_invitations: Boolean! = false): BasicStuffResult!
  reset_password_token_info(token: String!): PasswordResetTokenInfo!
  stats_query(breakdown_fexp_name: [String!]!, breakdown_fuser_id: [String!]!, breakdown_model: [String!]!, fgroup_id: String! = "", filter_fexp_id: [String!]! = [], filter_fuser_id: [String!]! = [], filter_model: [String!]! = [], filter_thing: [String!]! = [], st_chart: Int!, st_span: String!, timekey_from: String!, timekey_to: String!, ws_id: String! = ""): [FStatsOutput!]!
  stats_query_distinct(fgroup_id: String!, filter_fexp_id: [String!]!, filter_fuser_id: [String!]!, filter_model: [String!]!, st_chart: Int!, st_span: String!, timekey_from: String!, timekey_to: String!, ws_id: String!): StatsDistinctOutput!
  tech_support_get_config(ws_id: String!): TechSupportSettingsOutput
  thread_get(id: String!): FThreadOutput!
  thread_list(limit: Int!, located_fgroup_id: String!, skip: Int!, sort_by: String! = ""): [FThreadOutput!]!
  thread_messages_list(ft_id: String!, ftm_alt: Int = null): [FThreadMessageOutput!]!
  threads_app_captured(ft_app_capture: String!, ft_app_searchable: String!, located_fgroup_id: String!): [FThreadOutput!]!
  user_profile_get: FUserProfileOutput!
  workspace_permission_list(ws_id: String!): [FPermissionOutput!]!
  worldmap_everything(fgroup_id: String!): JSON!
}

input RegisterInput {
  fullname: String!
  password: String!
  username: String!
}

type StatsDistinctOutput {
  st_involved_fexp_id: JSON!
  st_involved_fuser_id: JSON!
  st_involved_model: JSON!
  st_thing: [String!]!
  timekey_now: String!
}

type Subscription {
  comprehensive_thread_subs(ft_id: String!, want_deltas: Boolean!): FThreadMessageSubs!
  ephemeral_subs(eds_id: String!): FEphemeralSubs!
  experts_in_group(filter: [String!]! = [], limit: Int! = 0, located_fgroup_id: String!, sort_by: [String!]! = []): FExpertSubs!
  external_data_sources_in_group(filter: [String!]! = [], limit: Int! = 0, located_fgroup_id: String!, sort_by: [String!]! = []): FExternalDataSourceSubs!
  knowledge_items_in_group(filter: [String!]! = [], limit: Int! = 0, located_fgroup_id: String!, sort_by: [String!]! = []): FKnowledgeItemSubs!
  permissions_in_group_subs(fgroup_id: String!, limit: Int!, quicksearch: String!): FPermissionSubs!
  persona_kanban_subs(limit_done: Int! = 30, limit_garbage: Int! = 30, limit_inbox: Int! = 30, persona_id: String!): FPersonaKanbanSubs!
  personas_in_group(filter: [String!]! = [], limit: Int! = 0, located_fgroup_id: String!, sort_by: [String!]! = []): FPersonaSubs!
  threads_in_group(filter: [String!]! = [], limit: Int! = 0, located_fgroup_id: String!, sort_by: [String!]! = []): FThreadSubs!
  tree_subscription(ws_id: String!): TreeUpdateSubs!
}

input TechSupportSettingsInput {
  support_api_key: String!
  support_channel_list: [String!]!
  support_discord_key: String!
  support_fgroup_id: String!
  support_fuser_id: String!
}

type TechSupportSettingsOutput {
  support_api_key: String!
  support_channel_list: [String!]!
  support_discord_key: String!
  support_fgroup_id: String!
  support_fuser_id: String!
}

type TreeUpdateSubs {
  treeupd_action: String!
  treeupd_id: String!
  treeupd_path: String!
  treeupd_roles: Int
  treeupd_tag: String!
  treeupd_title: String!
  treeupd_type: String!
}

"""BigInt field"""
scalar Union