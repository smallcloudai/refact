subscription ThreadsPageSubs($located_fgroup_id: String!, $limit: Int!) {
  threads_in_group(located_fgroup_id: $located_fgroup_id, limit: $limit) {
    news_action
    news_payload_id
    news_payload {
      owner_fuser_id
      owner_shared
      ft_id
      ft_title
      ft_error
      ft_updated_ts
      ft_locked_by
      ft_need_assistant
      ft_need_tool_calls
      # ft_anything_new
      ft_archived_ts
      ft_created_ts
      # ft_n
      # ft_max_new_tokens
      # ft_model
    }
  }
}

mutation DeleteThread($id: String!) {
  thread_delete(id: $id)
}

mutation CreateThread($input: FThreadInput!) {
  thread_create(input: $input) {
    ft_id
  }
}

subscription MessagesSubscription($ft_id: String!, $want_deltas: Boolean!) {
  comprehensive_thread_subs(ft_id: $ft_id, want_deltas: $want_deltas) {
    news_action
    news_payload_id
    news_payload_thread_message {
      ft_app_specific
      ftm_belongs_to_ft_id
      ftm_alt
      ftm_num
      ftm_prev_alt
      ftm_role
      ftm_content
      ftm_tool_calls
      ftm_call_id
      ftm_usage
      ftm_created_ts
      ftm_user_preferences ## contains {model: "model-name" }
      # ftm_provenance
    }
    stream_delta {
      ftm_role
      ftm_content
    }
    ## TBD: we could dispatch new_payload_thread_message, stream_delta, and new_payload_thread separately ?
    news_payload_thread {
      located_fgroup_id
      ft_id
      ft_need_user
      ft_need_assistant
      ft_fexp_id ## contain the expert id
      ft_confirmation_request
      ft_confirmation_response
      ft_title
    }
  }
}

mutation MessageCreateMultiple($input: FThreadMultipleMessagesInput!) {
  thread_messages_create_multiple(input: $input) {
    count
  }
}

mutation ThreadPatch($id: String!, $message: String!) {
  thread_patch(id: $id, patch: { ft_error: $message }) {
    ft_id
  }
}

query ExpertsForGroup($located_fgroup_id: String!) {
  experts_effective_list(located_fgroup_id: $located_fgroup_id) {
    fexp_id
    fexp_name
  }
}

query ModelsForExpert($fexp_id: String!, $inside_fgroup_id: String!) {
  expert_choice_consequences(
    fexp_id: $fexp_id
    inside_fgroup_id: $inside_fgroup_id
  ) {
    provm_name
  }
}

query ToolsForGroup($located_fgroup_id: String!) {
  cloud_tools_list(
    located_fgroup_id: $located_fgroup_id
    include_offline: false
  ) {
    ctool_confirmed_exists_ts
    ctool_description
    ctool_id
    ctool_name
    ctool_parameters
    located_fgroup_id
    owner_fuser_id
  }
}

mutation ThreadConfirmationResponse(
  $confirmation_response: String = ""
  $ft_id: String = ""
) {
  thread_set_confirmation_response(
    ft_id: $ft_id
    confirmation_response: $confirmation_response
  )
}

query BasicStuff {
  query_basic_stuff {
    fuser_id
    my_own_ws_id
    workspaces {
      ws_id
      ws_owner_fuser_id
      ws_root_group_id
      root_group_name
      have_coins_exactly
      have_coins_enough
      have_admin
    }
  }
}

mutation CreateWorkSpaceGroup(
  $fgroup_name: String!
  $fgroup_parent_id: String!
) {
  group_create(
    input: { fgroup_name: $fgroup_name, fgroup_parent_id: $fgroup_parent_id }
  ) {
    fgroup_id
    fgroup_name
    ws_id
    fgroup_parent_id
    fgroup_created_ts
  }
}

subscription WorkspaceTree($ws_id: String!) {
  tree_subscription(ws_id: $ws_id) {
    treeupd_action
    treeupd_id
    treeupd_path
    treeupd_type
    treeupd_title
  }
}
